---
title: "S_I_R V2 01.09.2021"
author: "Elvis Kirui"
date: "`r Sys.Date()`"
output:
  word_document: 
    fig_width: 9
    fig_height: 6
  pdf_document: default
  html_document: 
    keep_md: yes
---

# R Programming

```{r setup, include=FALSE}
## Set Chunk requirements
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)

```

## loading Relevant packages and Data Set

```{r Import relevant packages}
#Import relevant packages

## tidyverse includes readr, ggplot2, dplyr, forcats, tibble, tidyr, purrr, stringr
library(tidyverse) 
library(readxl)
library(janitor)
library(lubridate)
## loading the csv data set

setwd("E:/SIRModel")

#setwd("E:/SIRModel")

S_I_R_V2 <- read_excel("S_I_R V2.xlsx", sheet = "Sheet1")%>%
  clean_names()%>%
  select(-6,-7)%>%
mutate(population = gsub(",", "", population))%>%
mutate(population = as.numeric(population))


View(S_I_R_V2)



```

## Sir Models

### Building a two compartment model in R

The mean infectious period for covid- 19 is 14 days.

The deSolve package in R contains functions to solve initial value problems of a system of first-order ordinary differential equations ('ODE').

Step 1: Define the number of people in the infected and recovered cohort, the recovery rate gamma (γ=1/14) and the follow up duration depending on the month.

Step 2: Specify the model function

In the model function, specify the differential equations. The function has three input arguments :

-   time: The time-points at which we want to solve the model at

-   state:It stores the number of people in each compartment at every time point

-   parameters: The names and values of model parameters

Step 3 : Solve the model using ode() in deSolve package

Step 4: Plot the output using ggplot2

```{r}

#Load required libraries
library(deSolve)
library(reshape2)
library(plotly)

```


```{r}
# Model inputs

initial_values1<-c(I=S_I_R_V2$number_of_infected[S_I_R_V2$x2020 == "Total"]/18, R=0)

#initial_values1<-c(I=sum(Owid_Covid_Kenya$cases_new)/18, R=0)

parameters1<-c(gamma=round(1/14,2))



# Time points

time1=seq(from=0,t=31,by=1)

# SIR model function

sir_model1 <-function(time1,state,parameters1){
  with(as.list(c(state,parameters1)),{
    dI=-gamma*I
    dR=gamma*I
    return(list(c(dI,dR)))
  }
)  
}

#Solving the differential equation

output1<-as.data.frame(ode(y=initial_values1,func =   sir_model1,parms=parameters1,times = time1))


#To convert the dataframe to long   format
out_long1=melt(output1,id="time") 


  ggplot(data = out_long1,          
       aes(x = time, y = value, colour = variable)) +  
  geom_line() +                                                          
    scale_x_continuous(n.breaks = 16)+
    scale_y_continuous(n.breaks = 13)+
  labs(title = "Average infected and recovered for gamma = 1/14 days^-1",
       subtitle = "Mar 2021 - Aug 2021",
       x = "Time (days)",
       y = "No: of people")+
    scale_color_discrete(name="State")
  
  


```

we observe that on a monthly average, half of the infected cohort recovers in around 10 days


### Simple SIR Model


**What are the assumptions of an SIR model?**

- Homogeneous population : Individuals in the same compartment is subject to the same hazards

- Well-mixed population : All susceptible have the same risk of getting infected

- Immunity forever : Individuals who recovered from the disease are immune forever

The last assumption leads to the observation that SIR model is good for scenarios where population doesn’t change and the immunity is stable during the simulation period.

These assumptions give us the following set of differential equations:

  dS/dt = -beta * S * (I/N)
  
  dI/dt= beta * S * (I/N)- gamma * I
  
  dR/dt= gamma * I

where S,I and R represents the number of susceptible,infected and recovered individuals in each compartment respectively and N=S+I+R.

gamma(γ) is the recovery rate .(**controls transition between I and R**) 

beta (β) is the infection rate i.e the average number of secondary infections per unit time. (**controls transition between S and I**)

```{r}

#The mean infectious period for covid- 19 is 14 days and a person infects one #person on average every 7 days.

# Model inputs

initial_state_values=c(S=as.numeric(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"])-1,
                       I=1,R=0)
parameters=c(gamma=round(1/14,2),beta=round(1/7,2))

# Time points

time=seq(from=1,
         to=length(seq(as.Date("2020/03/13"), as.Date("2021/08/31"), by=1))
         ,by=1)

```


```{r}

# SIR model function 

sir_model2 <- function(time,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    dS=-beta*S*(I/N)
    dI= beta*S*(I/N)-gamma*I
    dR= gamma*I
    
    return(list(c(dS,dI,dR)))
  }
  )
}


#Solving the differential equations
output2<-as.data.frame(ode(y=initial_state_values,func = sir_model2,parms=parameters,times = time))%>%
  mutate(S = format(S, scientific = F, digits = 0))%>%
  mutate(I = format(I, scientific = F, digits = 0))%>%
  mutate(R = format(R, scientific = F, digits = 0))%>%
  mutate(across(c(2:4), as.numeric))


out_long2 <- melt(output2,id="time")
# To plot the proportion of susceptible, infected and recovered individuals over time
ggplot(data = out_long2,          
       aes(x = time, 
           y = value/S_I_R_V2$population[S_I_R_V2$x2020 == "Total"], colour = variable)) +  
  geom_line() +
  #scale_x_continuous(n.breaks = 20)+
  scale_x_continuous(breaks = seq(0, length(seq(as.Date("2020/03/13"), as.Date("2021/08/31"), by=1)), by = 30))+
    scale_y_continuous(n.breaks = 10)+
  xlab("Time (days)")+
  ylab("Proportion of the population")+
  scale_color_discrete(name="State")

```


## Estimating Basic reproduction number and infection rate (beta)

### Counting Process

The estimator theta is given by

theta = -In(1-p)/R(T)

s.e(theta) = (n/(S(0)+0.5)+n/(S(0)+0.5)-theta^2*U(T))^(1/2)/R(T)


R_o = n * theta

se_R_0 = n * s.e(theta)

where p is the observed final size (p = 1 − S(T)/n) at the end of the epidemic at time T.

n is the size of the population

S(T) is the size of the susceptible population at time T

S(0) is the size of the susceptible population at time 0

R(T) is the size of recovered individuals at time T

U(T)/R_eff = R_o * S(T)/S(0)


```{r}

#As at march 2020 - August 2021

p_Mar20_Aug21 = 1- ((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- S_I_R_V2$number_of_infected[S_I_R_V2$x2020 == "Total"]-S_I_R_V2$number_of_recovered[S_I_R_V2$x2020 == "Total"])/(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]))

theta_Mar20_Aug21 = -log(1-p_Mar20_Aug21)/S_I_R_V2$number_of_recovered[S_I_R_V2$x2020 == "Total"]

R_o_Mar20_Aug21 = S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]*theta_Mar20_Aug21

Beta_Mar20_Aug21 = R_o_Mar20_Aug21 * (1/14)

Ut_Mar20_Aug21 = R_o_Mar20_Aug21 * ((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- S_I_R_V2$number_of_infected[S_I_R_V2$x2020 == "Total"]-S_I_R_V2$number_of_recovered[S_I_R_V2$x2020 == "Total"])/(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]-1))


se_theta_Mar20_Aug21 = (((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]/((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]-1)^2 + 0.5))+(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]/((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]-1)^2+0.5))-((theta_Mar20_Aug21^2)*Ut_Mar20_Aug21))^(1/2))/S_I_R_V2$number_of_recovered[S_I_R_V2$x2020 == "Total"]


se_R_o_Mar20_Aug21 = S_I_R_V2$population[S_I_R_V2$x2020 == "Total"] * se_theta_Mar20_Aug21

R_o_Mar20_Aug21_interval = paste(R_o_Mar20_Aug21 - 1.96*se_R_o_Mar20_Aug21, R_o_Mar20_Aug21 + 1.96*se_R_o_Mar20_Aug21)

```


```{r}

#As at beginning 

p_beginning = 1- ((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- 84-79)/(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]))

theta_beginning = -log(1-p_beginning)/79

R_o_beginning = S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]*theta_beginning

Beta_beginning = R_o_beginning * (1/14)


```


```{r}

#Total Lockdown

p_TotalLockdown = 1 - ((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- sum(S_I_R_V2$number_of_infected[which(S_I_R_V2$status == "Total Lockdown")])-sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Total Lockdown")]))/(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]))

theta_TotalLockdown = -log(1-p_TotalLockdown)/sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Total Lockdown")])  

R_o_TotalLockdown = S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]*theta_TotalLockdown

Beta_TotalLockdown = R_o_TotalLockdown * (1/14)

Ut_TotalLockdown = R_o_TotalLockdown * ((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- sum(S_I_R_V2$number_of_infected[which(S_I_R_V2$status == "Total Lockdown")])-sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Total Lockdown")]))/(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]-1))


se_theta_TotalLockdown = (((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]/((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]-1)^2 + 0.5))+(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]/((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]-1)^2+0.5))-((theta_TotalLockdown^2)*Ut_TotalLockdown))^(1/2))/sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Total Lockdown")])


se_R_o_TotalLockdown = S_I_R_V2$population[S_I_R_V2$x2020 == "Total"] * se_theta_TotalLockdown

R_o_TotalLockdown_interval = paste(R_o_TotalLockdown - 1.96*se_R_o_TotalLockdown, R_o_TotalLockdown + 1.96*se_R_o_TotalLockdown)


```


```{r}

#Partially opening

p_Partiallyopening = 1 - ((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- sum(S_I_R_V2$number_of_infected[which(S_I_R_V2$status == "Partially opening")])-sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Partially opening")]))/(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]))

theta_Partiallyopening = -log(1-p_Partiallyopening)/sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Partially opening")])  

R_o_Partiallyopening = S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]*theta_Partiallyopening

Beta_Partiallyopening = R_o_Partiallyopening * (1/14)

Ut_Partiallyopening = R_o_Partiallyopening * ((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- sum(S_I_R_V2$number_of_infected[which(S_I_R_V2$status == "Partially opening")])-sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Partially opening")]))/(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- sum(S_I_R_V2$number_of_infected[which(S_I_R_V2$status == "Total Lockdown")])-sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Total Lockdown")])))


se_theta_Partiallyopening = (((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]/((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- sum(S_I_R_V2$number_of_infected[which(S_I_R_V2$status == "Total Lockdown")])-sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Total Lockdown")]))^2 + 0.5))+(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]/((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- sum(S_I_R_V2$number_of_infected[which(S_I_R_V2$status == "Total Lockdown")])-sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Total Lockdown")]))^2+0.5))-((theta_Partiallyopening^2)*Ut_Partiallyopening))^(1/2))/sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Partially opening")])


se_R_o_Partiallyopening = S_I_R_V2$population[S_I_R_V2$x2020 == "Total"] * se_theta_Partiallyopening

R_o_Partiallyopening_interval = paste(R_o_Partiallyopening - 1.96*se_R_o_Partiallyopening, R_o_Partiallyopening + 1.96*se_R_o_Partiallyopening)


```


```{r}

#Reopening

p_Reopening = 1 - ((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- sum(S_I_R_V2$number_of_infected[which(S_I_R_V2$status == "Reopening")])-sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Reopening")]))/(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]))

theta_Reopening = -log(1-p_Reopening)/sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Reopening")])  

R_o_Reopening = S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]*theta_Reopening

Beta_Reopening = R_o_Reopening * (1/14)

Ut_Reopening = R_o_Reopening * ((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- sum(S_I_R_V2$number_of_infected[which(S_I_R_V2$status == "Reopening")])-sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Reopening")]))/(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- sum(S_I_R_V2$number_of_infected[which(S_I_R_V2$status == "Total Lockdown"| S_I_R_V2$status == "Partially opening")])-sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Total Lockdown"|S_I_R_V2$status == "Partially opening")])))


se_theta_Reopening = (((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]/((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- sum(S_I_R_V2$number_of_infected[which(S_I_R_V2$status == "Total Lockdown"| S_I_R_V2$status == "Partially opening")])-sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Total Lockdown"|S_I_R_V2$status == "Partially opening")]))^2 + 0.5))+(S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]/((S_I_R_V2$population[S_I_R_V2$x2020 == "Total"]- sum(S_I_R_V2$number_of_infected[which(S_I_R_V2$status == "Total Lockdown"| S_I_R_V2$status == "Partially opening")])-sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Total Lockdown"|S_I_R_V2$status == "Partially opening")]))^2+0.5))-((theta_Reopening^2)*Ut_Reopening))^(1/2))/sum(S_I_R_V2$number_of_recovered[which(S_I_R_V2$status == "Reopening")])


se_R_o_Reopening = S_I_R_V2$population[S_I_R_V2$x2020 == "Total"] * se_theta_Reopening

R_o_Reopening_interval = paste(R_o_Reopening - 1.96*se_R_o_Reopening, R_o_Reopening + 1.96*se_R_o_Reopening)



```


```{r}
counting_process_output <- tibble( status = c("Beginning", "Mar2020-Aug2021", "Total Lockdown", "Partially opening", "Reopening" ),
        Ro = round( c(R_o_beginning, R_o_Mar20_Aug21 ,
          R_o_TotalLockdown, R_o_Partiallyopening, R_o_Reopening),4),
        infection_rate_Beta = round(c(Beta_beginning, Beta_Mar20_Aug21 ,
          Beta_TotalLockdown, Beta_Partiallyopening, Beta_Reopening), 4),
        Ro_95CI = c( NA,
                     paste("( ", round(R_o_Mar20_Aug21 - 1.96*se_R_o_Mar20_Aug21,4), ", ", round(R_o_Mar20_Aug21 + 1.96*se_R_o_Mar20_Aug21,4), " )", sep = ""),
                     paste("( ", round(R_o_TotalLockdown - 1.96*se_R_o_TotalLockdown,4), ", ", round(R_o_TotalLockdown + 1.96*se_R_o_TotalLockdown,4), " )", sep = ""),
                     paste("( ", round(R_o_Partiallyopening - 1.96*se_R_o_Partiallyopening,4), ", ", round(R_o_Partiallyopening + 1.96*se_R_o_Partiallyopening,4), " )", sep = ""),
                     paste("( ", round(R_o_Reopening - 1.96*se_R_o_Reopening,4), ", ", round(R_o_Reopening + 1.96*se_R_o_Reopening,4), " )", sep = ""))
                                   )

library(knitr)
kable(counting_process_output)

```

















